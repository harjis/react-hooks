{"version":3,"sources":["hooks/useSnapshotStore.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["generatedKeys","initialState","counter","App","React","useState","isMounted","setIsMounted","counters","Array","from","length","x","i","onClick","prevState","map","Counter","id","props","localStorageKey","persistent","timeToLive","timestampRef","useRef","useEffect","Error","item","localStorage","getItem","JSON","parse","setItem","stringify","error","snapshotState","setSnapshotState","state","save","current","Date","now","console","log","remove","removeItem","verify","useSnapshotStore","setCounter","style","display","flexDirection","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mMAGMA,EAA+B,GCC/BC,EAAe,CAAEC,QAAS,GAsBjBC,EArBO,WAAO,IAAD,EACQC,IAAMC,UAAS,GADvB,mBACnBC,EADmB,KACRC,EADQ,KAEpBC,EAAWC,MAAMC,KAAK,CAAEC,OAAQ,IAAK,SAACC,EAAGC,GAAJ,OAAUA,KACrD,OACE,gCACE,8BACE,wBACEC,QAAS,WACPP,GAAa,SAACQ,GAAD,OAAgBA,MAFjC,SAKGT,EAAY,mBAAqB,qBAIrCA,GACCE,EAASQ,KAAI,SAACd,GAAD,OAAa,cAACe,EAAD,CAAuBC,GAAIhB,GAAbA,UAOhD,SAASe,EAAQE,GAAwB,IAAD,EDXR,YAKA,IAJ9BlB,EAI6B,EAJ7BA,aACAmB,EAG6B,EAH7BA,gBAG6B,IAF7BC,kBAE6B,aAD7BC,kBAC6B,MADhB,MACgB,EACvBC,EAAenB,IAAMoB,OAAsB,MACjDpB,IAAMqB,WAAU,WACd,GAAKzB,EAAcoB,GAGjB,MAAM,IAAIM,MAAJ,eACIN,EADJ,uCAKR,OAPEpB,EAAcoB,IAAmB,EAO5B,kBACEpB,EAAcoB,MAItB,IAhB0B,MAkBahB,IAAMC,UAAS,WACvD,IACE,IAAMsB,EAAOC,aAAaC,QAAQT,GAClC,OAAIO,EACKG,KAAKC,MAAMJ,IAElBC,aAAaI,QAAQZ,EAAiBU,KAAKG,UAAUhC,IAC9CA,GAET,MAAOiC,GACP,OAAOjC,MA5BkB,mBAkBtBkC,EAlBsB,KAkBPC,EAlBO,KA+D7B,MAAO,CAAEC,MAAOF,EAAeG,KA/BlB,SAACD,GACZ,IACED,EAAiBC,GACjBT,aAAaI,QAAQZ,EAAiBU,KAAKG,UAAUI,IACrDd,EAAagB,QAAUC,KAAKC,MAC5B,MAAOP,GACPQ,QAAQC,IAAIT,KAyBqBU,OArBtB,WACbhB,aAAaiB,WAAWzB,GACxBgB,EAAiBnC,UACVD,EAAcoB,IAkBsB0B,OAf9B,WAUTzB,GARGA,GAIsB,OAAzBE,EAAagB,SACbC,KAAKC,MAAQnB,EAAaC,EAAagB,SAIzCX,aAAaiB,WAAWzB,KCpDI2B,CAAiB,CAC/C9C,eACAmB,gBAAiB,cAAgBD,EAAMD,KAFjCoB,EAD8B,EAC9BA,KAAMM,EADwB,EACxBA,OAAQP,EADgB,EAChBA,MADgB,EAMRjC,IAAMC,SAASgC,GANP,mBAM/BnC,EAN+B,KAMtB8C,EANsB,KAkBtC,OACE,sBAAKC,MAAO,CAAEC,QAAS,OAAQC,cAAe,UAA9C,UACE,gCACE,wBAAQrC,QAdF,kBACVkC,GAAW,SAACjC,GAAD,mBAAC,eACPA,GADM,IAETb,QAASa,EAAUb,QAAU,QAW3B,eACA,wBAAQY,QATF,kBACVkC,GAAW,SAACjC,GAAD,mBAAC,eACPA,GADM,IAETb,QAASa,EAAUb,QAAU,QAM3B,eACA,wBAAQY,QAAS,kBAAMwB,EAAKpC,IAA5B,2BACA,wBAAQY,QAAS,kBAAM8B,KAAvB,kCAEF,4CACY1C,EAAQA,QADpB,oBAC8CmC,EAAMnC,cC3CtCkD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAClCA,EAAaC,kB","file":"static/js/main.3e2290f5.chunk.js","sourcesContent":["import React from \"react\";\n\ntype GeneratedKeys = { [key: string]: true };\nconst generatedKeys: GeneratedKeys = {};\n\nexport type Props<T> = {\n  initialState: T;\n  localStorageKey: string;\n  persistent?: boolean;\n  timeToLive?: number;\n};\ntype ReturnType<T> = {\n  state: T;\n  save: (state: T) => void;\n  remove: () => void;\n  verify: () => void;\n};\nexport const useSnapshotStore = <T>({\n  initialState,\n  localStorageKey,\n  persistent = true,\n  timeToLive = 1000 * 60 * 60 * 8,\n}: Props<T>): ReturnType<T> => {\n  const timestampRef = React.useRef<number | null>(null);\n  React.useEffect(() => {\n    if (!generatedKeys[localStorageKey]) {\n      generatedKeys[localStorageKey] = true;\n    } else {\n      throw new Error(\n        `Key: ${localStorageKey} is already in use by another hook`\n      );\n    }\n\n    return () => {\n      delete generatedKeys[localStorageKey];\n    };\n    // Eslint is disabled on purpose for this. The effect registers an id for a hook\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const [snapshotState, setSnapshotState] = React.useState(() => {\n    try {\n      const item = localStorage.getItem(localStorageKey);\n      if (item) {\n        return JSON.parse(item);\n      } else {\n        localStorage.setItem(localStorageKey, JSON.stringify(initialState));\n        return initialState;\n      }\n    } catch (error) {\n      return initialState;\n    }\n  });\n\n  const save = (state: T) => {\n    try {\n      setSnapshotState(state);\n      localStorage.setItem(localStorageKey, JSON.stringify(state));\n      timestampRef.current = Date.now();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const remove = () => {\n    localStorage.removeItem(localStorageKey);\n    setSnapshotState(initialState);\n    delete generatedKeys[localStorageKey];\n  };\n\n  const verify = () => {\n    const isStale = (): boolean => {\n      if (!persistent) {\n        return false;\n      }\n      return (\n        timestampRef.current !== null &&\n        Date.now() - timeToLive > timestampRef.current\n      );\n    };\n    if (persistent && isStale()) {\n      localStorage.removeItem(localStorageKey);\n    }\n  };\n\n  return { state: snapshotState, save, remove, verify };\n};\n","import React from \"react\";\n\nimport { useSnapshotStore } from \"./hooks/useSnapshotStore\";\n\nconst initialState = { counter: 0 };\nconst App: React.FC = () => {\n  const [isMounted, setIsMounted] = React.useState(true);\n  const counters = Array.from({ length: 5 }, (x, i) => i);\n  return (\n    <div>\n      <div>\n        <button\n          onClick={() => {\n            setIsMounted((prevState) => !prevState);\n          }}\n        >\n          {isMounted ? \"Click to unmount\" : \"Click to mount\"}\n        </button>\n      </div>\n\n      {isMounted &&\n        counters.map((counter) => <Counter key={counter} id={counter} />)}\n    </div>\n  );\n};\n\nexport default App;\n\nfunction Counter(props: { id: number }) {\n  const { save, remove, state } = useSnapshotStore({\n    initialState,\n    localStorageKey: \"my-storage-\" + props.id,\n  });\n\n  const [counter, setCounter] = React.useState(state);\n  const inc = () =>\n    setCounter((prevState) => ({\n      ...prevState,\n      counter: prevState.counter + 1,\n    }));\n\n  const dec = () =>\n    setCounter((prevState) => ({\n      ...prevState,\n      counter: prevState.counter - 1,\n    }));\n  return (\n    <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n      <div>\n        <button onClick={inc}>+</button>\n        <button onClick={dec}>-</button>\n        <button onClick={() => save(counter)}>Save to store</button>\n        <button onClick={() => remove()}>Remove from store</button>\n      </div>\n      <div>\n        counter: {counter.counter} persistedState: {state.counter}\n      </div>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}